// This file is @generated by prost-build.
/// The request message containing the user's name.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalogyGrpcLogMessage {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(enumeration = "AnalogyGrpcLogLevel", tag = "2")]
    pub level: i32,
    #[prost(message, optional, tag = "3")]
    pub date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int32, tag = "4")]
    pub process_id: i32,
    #[prost(int32, tag = "5")]
    pub thread_id: i32,
    #[prost(string, tag = "6")]
    pub module: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub source: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub method_name: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub file_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "10")]
    pub line_number: i32,
    #[prost(string, tag = "11")]
    pub machine_name: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub category: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub user: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "14")]
    pub additional_information: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "15")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration = "AnalogyGrpcLogClass", tag = "16")]
    pub class: i32,
}
/// The response message containing the greetings.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalogyMessageReply {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalogyConsumerMessage {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub stream_old_messages: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AnalogyGrpcLogClass {
    General = 0,
    /// / <summary>
    /// / Security logs (audit trails)
    /// / </summary>
    Security = 1,
    /// / <summary>
    /// / Hazard issues
    /// / </summary>
    Hazard = 2,
    ///
    /// Summary:
    /// Protected Health Information
    Phi = 3,
}
impl AnalogyGrpcLogClass {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AnalogyGrpcLogClass::General => "GENERAL",
            AnalogyGrpcLogClass::Security => "SECURITY",
            AnalogyGrpcLogClass::Hazard => "HAZARD",
            AnalogyGrpcLogClass::Phi => "PHI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GENERAL" => Some(Self::General),
            "SECURITY" => Some(Self::Security),
            "HAZARD" => Some(Self::Hazard),
            "PHI" => Some(Self::Phi),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AnalogyGrpcLogLevel {
    Unknown = 0,
    Trace = 1,
    Verbose = 2,
    Debug = 3,
    Information = 4,
    Warning = 5,
    Error = 6,
    Critical = 7,
    Analogy = 8,
    None = 9,
}
impl AnalogyGrpcLogLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AnalogyGrpcLogLevel::Unknown => "UNKNOWN",
            AnalogyGrpcLogLevel::Trace => "TRACE",
            AnalogyGrpcLogLevel::Verbose => "VERBOSE",
            AnalogyGrpcLogLevel::Debug => "DEBUG",
            AnalogyGrpcLogLevel::Information => "INFORMATION",
            AnalogyGrpcLogLevel::Warning => "WARNING",
            AnalogyGrpcLogLevel::Error => "ERROR",
            AnalogyGrpcLogLevel::Critical => "CRITICAL",
            AnalogyGrpcLogLevel::Analogy => "ANALOGY",
            AnalogyGrpcLogLevel::None => "NONE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "TRACE" => Some(Self::Trace),
            "VERBOSE" => Some(Self::Verbose),
            "DEBUG" => Some(Self::Debug),
            "INFORMATION" => Some(Self::Information),
            "WARNING" => Some(Self::Warning),
            "ERROR" => Some(Self::Error),
            "CRITICAL" => Some(Self::Critical),
            "ANALOGY" => Some(Self::Analogy),
            "NONE" => Some(Self::None),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod analogy_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The greeting service definition.
    #[derive(Debug, Clone)]
    pub struct AnalogyClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AnalogyClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AnalogyClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AnalogyClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AnalogyClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Sends a greeting
        pub async fn subscribe_for_publishing_messages(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::AnalogyGrpcLogMessage,
            >,
        ) -> std::result::Result<
            tonic::Response<super::AnalogyMessageReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/greet.Analogy/SubscribeForPublishingMessages",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("greet.Analogy", "SubscribeForPublishingMessages"),
                );
            self.inner.client_streaming(req, path, codec).await
        }
        pub async fn subscribe_for_consuming_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalogyConsumerMessage>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AnalogyGrpcLogMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/greet.Analogy/SubscribeForConsumingMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("greet.Analogy", "SubscribeForConsumingMessages"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
